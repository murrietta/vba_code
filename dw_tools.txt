''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Typical routines associated with DW usage
'last updated 2017-07-31
'updated names: getDataFromFilteredDWPivot -> expandDetails
'               aggDetails                 -> aggregateDetails
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function expandDetails(pvt As PivotTable, aggCol, max_rows, Optional flag_col = "", Optional rmBlankRows = False, Optional unlistTable = False)
'assumes that there is a pivot table on the activesheet that has some fields visible
Dim sht As Worksheet, cl As Range
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Set sht = pvt.Parent


'get name of pivot table and the top row of it
'Set pvt = sht.PivotTables.Item(1)
hdrRow = pvt.RowRange.Row  'only works if there are fields in the pivot table, leaving it here for reference right now

'get some other info
dtHdrRow = 3 'this is the row containing the headers for the detail pages
'get info about this sheet
shtLR = Split(sht.TableRange1.Address, "$", 5)(4)
shtLC = Split(sht.UsedRange.Address, "$", 5)(3)
'tell the user how many sheets will be made and ask if they still want to proceed
setDetailMaxRows max_rows
'If show_msg = True Then
'    If MsgBox("This macro will create " & shtLR - hdrRow & " new sheets in this workbook, proceed?", vbYesNo, ttl) = vbNo Then
'        Exit Sub
'    End If
'End If
'assumes you filtered already
shtNames = ""
i = 0
For Each cl In sht.Range(aggCol & hdrRow + 1 & ":" & aggCol & shtLR).SpecialCells(xlCellTypeVisible)
    If Not (LCase(sht.Range("A" & cl.Row).Value) Like "*total*") Then
        cl.ShowDetail = True
        ActiveSheet.Name = "Detail " & i
        shtNames = shtNames & vbLf & ActiveSheet.Name
        i = i + 1
        If rmBlankRows Then
            Application.CalculateUntilAsyncQueriesDone
            ActiveSheet.Range("1:2").Delete xlShiftUp
        End If
        If unlistTable Then
            Application.CalculateUntilAsyncQueriesDone
            ActiveSheet.ListObjects(1).Unlist
        End If
        'add flag if appropriate
        If flag_col <> "" Then
            flag = sht.Range(flag_col & cl.Row).Value
            Application.CalculateUntilAsyncQueriesDone
            LR = Split(ActiveSheet.UsedRange.Address, "$", 5)(4)
            lc = Split(ActiveSheet.[a3].End(xlToRight).Offset(0, 1).Address, "$", 3)(1)
            ActiveSheet.Range(lc & "3").Value = sht.Range(flag_col & hdrRow).Value
            ActiveSheet.Range(lc & "4:" & lc & LR).FormulaArray = flag
        End If
    End If
Next cl
'return to the control panel sheet
sht.Activate
'don't finish until queries are done
Application.CalculateUntilAsyncQueriesDone
'return an array of the sheet names
shtNames = Right(shtNames, Len(shtNames) - 1)
expandDetails = Split(shtNames, vbLf, 1 + Len(shtNames) - Len(Replace(shtNames, vbLf, "")))
End Function
Function aggregateDetails(smrname, Optional clear_smr = True, Optional hdrStrs) As Worksheet
Dim smr As Worksheet, det As Worksheet
'sht should be the sheet with the DW but it really doesn't matter as it is just a reference of where to put the output
'sheet if it doesn't already exist
'Set sht = ActiveSheet

'added optional variable hdrStrs which should be an array of strings to replace in the header of the aggregate sheet
Application.ScreenUpdating = False
Application.DisplayAlerts = False
'detail sheet parameter, the header row for detail sheets is always 3 as of 2017-02-15
dtHdrRow = 3
'proceed
Set smr = comtools.addSheet(smrname, clear_cells:=clear_smr)
smrLR = 0
If clear_smr = False Then
    smrLR = Split(smr.UsedRange.Address, "$", 5)(4)
End If
For Each det In ActiveWorkbook.Sheets
    If det.Name Like "Detail*" Then
        detLR = Split(det.UsedRange.Address, "$", 5)(4)
        detLC = Split(det.UsedRange.Address, "$", 5)(3)
        If smrLR = 0 Then
            copRow = dtHdrRow
        Else
            copRow = dtHdrRow + 1
        End If
        det.Range("A" & copRow & ":" & detLC & detLR).Copy smr.Range("A" & smrLR + 1)
        smrLR = Split(smr.UsedRange.Address, "$", 5)(4)
        'If del_det = True Then
            det.Delete
        'End If
    End If
Next det
Set det = Nothing

'clean up the combined table
undotable smr

'clean header, just replaces the hdrStrs with blank
If IsArray(hdrStrs) Then
    For i = LBound(hdrStrs) To UBound(hdrStrs)
        smr.Range("1:1").Replace hdrStrs(i), "", lookat:=xlPart
    Next i
End If

'this is old, used it when we were still getting used to DW, now we can just use subs and functions from common_tools module
'Set cl = smr.Range("1:1").Find(what:="*Clinical Queries*", lookat:=xlPart)
'If Not cl Is Nothing Then
'    'remove extraneous detail from header names
'    smr.Range(smr.[a1], smr.[a1].End(xlToRight)).Replace what:="[Clinical Queries].", replacement:="", lookat:=xlPart
'    smr.Range(smr.[a1], smr.[a1].End(xlToRight)).Replace what:="[$Clinical Queries].", replacement:="", lookat:=xlPart
'    smr.Range(smr.[a1], smr.[a1].End(xlToRight)).Replace what:="$Date.", replacement:="", lookat:=xlPart
'
'    'convert datetime strings, leave them as their own columns next to the text versions
'    On Error GoTo 0
'    dtCols = Array(smr.Range("1:1").Find(what:="activity date time", lookat:=xlPart, MatchCase:=False).Column, _
'                    smr.Range("1:1").Find(what:="entered date time", lookat:=xlPart, MatchCase:=False).Column)
'    If dtCols(0) <> "" Then
'        addCols = Array(Split(smr.[a1].End(xlToRight).Offset(0, 1).Address, "$", 3)(1), Split(smr.[a1].End(xlToRight).Offset(0, 2).Address, "$", 3)(1))
'        smr.Range(addCols(0) & "2").Formula = "=datevalue(r[0]c" & dtCols(0) & ") + timevalue(r[0]c" & dtCols(0) & ")"
'        smr.Range(addCols(1) & "2").Formula = "=datevalue(r[0]c" & dtCols(1) & ") + timevalue(r[0]c" & dtCols(1) & ")"
'        smr.Range(addCols(0) & "2:" & addCols(1) & "2").NumberFormat = "m/d/yyyy h:mm:ss AM/PM"
'        smr.Range(addCols(0) & "2:" & addCols(1) & "2").AutoFill smr.Range(addCols(0) & "2:" & addCols(1) & smrLR)
'        smr.Range(addCols(0) & "2:" & addCols(1) & smrLR).Copy
'        smr.Range(addCols(0) & "2:" & addCols(1) & smrLR).PasteSpecial xlPasteValuesAndNumberFormats
'        smr.Range(addCols(0) & "1").Value = "activity datetime"
'        smr.Range(addCols(1) & "1").Value = "entered datetime"
'    End If
'End If

Set aggregateDetails = smr
End Function
Sub deleteDetails()
Dim sht As Worksheet
Application.ScreenUpdating = False
Application.DisplayAlerts = False
For Each sht In ActiveWorkbook.Sheets
    If sht.Name Like "Detail*" Then
        sht.Delete
    End If
Next sht
Set sht = Nothing
End Sub
Sub setDetailMaxRows(maxRows, Optional conFile As String = "CHCC-DW-BI-2 Quality Outcomes Model.odc")
'fairly specific, will only work for the general quality model named "Model" (won't work for the EBM model or perspectives of the quality model)
'also assumes that the current user stores this models data connection in Documents\My Data Sources\ and also that they named it

'conFile = "CHCC-DW-BI-2 Quality Outcomes Model.odc"

tmp2 = Split(Application.UserLibraryPath, "\", 4)
basePath = tmp2(0) & "\" & tmp2(1) & "\" & tmp2(2) & "\"
    With ActiveWorkbook.Connections(Replace(conFile, ".odc", "")).OLEDBConnection
        .CommandText = Array("Model")
        .CommandType = xlCmdCube
        .Connection = Array( _
        "OLEDB;Provider=MSOLAP.4;Integrated Security=SSPI;Persist Security Info=True;Initial Catalog=Quality Outcomes;Data Source=" & _
                Split(conFile, " ", 2)(0) & ";", "MDX Compatibility=1;Safety Options=2;MDX Missing Member Mode=Error")
        .RefreshOnFileOpen = False
        .SavePassword = False
        .SourceConnectionFile = basePath & "My Data Sources\" & conFile
        .MaxDrillthroughRecords = maxRows
        .ServerCredentialsMethod = xlCredentialsMethodIntegrated
        .AlwaysUseConnectionFile = False
        .RetrieveInOfficeUILang = True
        .ServerFillColor = True
        .ServerFontStyle = True
        .ServerNumberFormat = True
        .ServerTextColor = True
    End With
    With ActiveWorkbook.Connections(Replace(conFile, ".odc", ""))
        .Name = Replace(conFile, ".odc", "")
        .Description = ""
    End With
End Sub
Sub filterTableBy(fltshtnm, shtCol, tbl, fld, pvt As PivotTable, Optional stRow = 2, Optional clearTable = False, Optional inclCol = False)
'generic macro to filter a table by a column by a list of values that exist in that column.

Dim fltsht As Worksheet

'proceed with macro
Set fltsht = Sheets(fltshtnm)
fltshtLR = Split(fltsht.UsedRange.Address, "$", 5)(4)
fltshtLC = Split(fltsht.UsedRange.Address, "$", 5)(3)

'create an array of the unique accounts on the acct sheet
'could probably just make a call to common_tools.rangeToArr
acct = ""
For Each cl In fltsht.Range(shtCol & stRow & ":" & shtCol & fltshtLR).SpecialCells(xlCellTypeVisible)
    If Not acct Like "*" & cl.Value & "*" Then
        'added check for inclusion
        If inclCol Then
            If cl.Offset(0, 1).Value Then
                acct = acct & vbLf & "[" & tbl & "].[" & fld & "].&[" & cl.Value & "]"
            End If
        Else
            acct = acct & vbLf & "[" & tbl & "].[" & fld & "].&[" & cl.Value & "]"
        End If
    End If
Next cl
acct = Right(acct, Len(acct) - 1)
acct = Split(acct, vbLf, 1 + Len(acct) - Len(Replace(acct, vbLf, "")))

'clearing the pivot table
If clearTable Then
    pvt.clearTable
End If
    
'filter based on the list
pvt.CubeFields("[" & tbl & "].[" & fld & "]").CreatePivotFields
pvt.PivotFields("[" & tbl & "].[" & fld & "].[" & fld & "]").VisibleItemsList = acct

'add account number and then assessment to the pivot table
With pvt.CubeFields("[" & tbl & "].[" & fld & "]")
    .Orientation = xlRowField
    .position = 1
End With

End Sub
Sub testAccountsInTable(accts As Worksheet, acctCol, tbl, col, Optional flt = False, Optional verbose = True)
Dim pvt As PivotTable
'set sht and pvt to active sheet and the first pivot table on it, should just be DW pivot
Set sht = Sheets("dw")
Set pvt = sht.PivotTables.Item(1)
'set the sheet variable and msgbox title, verify it is okay to proceed.
ttl2 = "Account Table Tester"
'clear
pvt.clearTable
'Set accts = Sheets(sht.Cells.Find(what:="test value sheet", lookat:=xlWhole, searchorder:=xlByRows).Offset(0, 1).Value)
If verbose Then
    If MsgBox("This macro will write to the first column from the left that does not have a header on sheet '" & accts.Name & _
        "' or will write to the 'In table?' column." & vbLf & vbLf & "Okay to proceed?", vbYesNo, ttl2) = vbNo Then
        MsgBox "Canceled!", vbInformation, ttl2
        Exit Sub
    End If
Else
    'acctCol = sht.Cells.Find(what:="test value column", lookat:=xlWhole, searchorder:=xlByRows).Offset(0, 1).Value
    'tbl = sht.Cells.Find(what:="test table", lookat:=xlWhole, searchorder:=xlByRows).Offset(0, 1).Value
    acctsLR = Split(accts.UsedRange.Address, "$", 5)(4)
    Set cl = accts.Cells.Find(what:="In " & tbl & "?", lookat:=xlWhole, searchorder:=xlByRows)
    If cl Is Nothing Then
        On Error Resume Next
        writeCol = Split(accts.[a1].End(xlToRight).Offset(0, 1).Address, "$", 3)(1)
        On Error GoTo 0
        If IsEmpty(writeCol) Then
            writeCol = "b"
        End If
        accts.Range(writeCol & "1").Value = "In " & tbl & "?"
    Else
        On Error Resume Next
        writeCol = Split(cl.Address, "$", 3)(1)
        On Error GoTo 0
        If IsEmpty(writeCol) Then
            writeCol = "b"
        End If
        accts.Range(writeCol & "2:" & writeCol & acctsLR).Clear
    End If
    
    'loop through each and try it, if it fails then write a note in outer most column
    pvt.CubeFields("[" & tbl & "].[" & col & "]").CreatePivotFields
    On Error Resume Next
    For Each cl In accts.Range(acctCol & "2:" & acctCol & acctsLR).SpecialCells(xlCellTypeVisible)
        pvt.PivotFields("[" & tbl & "].[" & col & "].[" & col & "]").VisibleItemsList = Array("[" & tbl & "].[" & col & "].&[" & cl.Value & "]")
        If Err.Description <> "" Then
            accts.Range(writeCol & cl.Row).Value = False
            If verbose Then
                Debug.Print Err.Description
            End If
            Err.Clear
        Else
            accts.Range(writeCol & cl.Row).Value = True
        End If
    Next cl
    On Error GoTo 0
    'accts.Range(writeCol & "1").Value = "In table?"
    
    'filter the range if it is specified by the user
    'flt = sht.Cells.Find(what:="Filter Out False?", lookat:=xlWhole, searchorder:=xlByRows).Offset(0, 1).Value
    If flt Then
        accts.UsedRange.AutoFilter  'clear any previous filters
        accts.Range("A1:" & writeCol & acctsLR).AutoFilter field:=accts.Range(writeCol & "1").Column, Criteria1:=True
    End If
End If
End Sub
Function testAccountsInArray(arr, tbl, col, pvt As PivotTable)
'set the sheet variable and msgbox title, verify it is okay to proceed.
ttl2 = "Account Table Tester"
'clear
pvt.clearTable

'loop through each and try it, if it fails then write a note in outer most column
pvt.CubeFields("[" & tbl & "].[" & col & "]").CreatePivotFields
arr2 = ""
On Error Resume Next
For i = LBound(arr) To UBound(arr)
    pvt.PivotFields("[" & tbl & "].[" & col & "].[" & col & "]").VisibleItemsList = Array("[" & tbl & "].[" & col & "].&[" & arr(i) & "]")
    If Err.Description <> "" Then
        Debug.Print Err.Description
        Err.Clear
    Else
        arr2 = arr2 & vbLf & arr(i)
    End If
Next i
On Error GoTo 0
arr2 = Right(arr2, Len(arr2) - 1)
arr2 = Split(arr2, vbLf, 1 + Len(arr2) - Len(Replace(arr2, vbLf, "")))
testAccountsInArray = arr2
End Function
Private Function WorksheetExists(WSName As String) As Boolean
On Error Resume Next
WorksheetExists = Worksheets(WSName).Name = WSName
On Error GoTo 0
End Function
Private Sub undotable(smr As Worksheet)
If smr.ListObjects.Count > 0 Then
    smr.ListObjects(1).Unlist
    smr.Cells.Interior.Pattern = xlNone
    smr.Cells.Font.Color = vbBlack
    smr.Cells.Borders().LineStyle = xlNone
End If
End Sub
Sub removeSubtotals(pvt As PivotTable)
pvt.RowAxisLayout xlTabularRow
pvt.RepeatAllLabels xlRepeatLabels
pvt.ColumnGrand = False
pvt.RowGrand = False
For Each pf In pvt.PivotFields
    If pf.caption <> "Values" Then
        If pf.IsCalculated = False Then
            pf.Subtotals = Array(False, False, _
                False, False, False, False, False, False, False, False, False, False)
        End If
    End If
Next pf
End Sub

Function ISOdateRange(dts, tbl, fld)
    'function input for testing
'    dts = Array(CDate("5/14/2017"), CDate("5/16/2017"))
'    tbl = "Clinical Queries"
'    fld = "Activity Date"
    'begin
    dt = dts(LBound(dts))
    arr = ""
    Do While dt <= CDate(dts(UBound(dts)))
        If arr = "" Then
            arr = "[" & tbl & "].[" & fld & "].&[" & Format(dt, "yyyy-mm-dd") & "T00:00:00]"
        Else
            arr = arr & vbLf & "[" & tbl & "].[" & fld & "].&[" & Format(dt, "yyyy-mm-dd") & "T00:00:00]"
        End If
        dt = DateAdd("d", 1, dt)
'        Debug.Print arr
    Loop
    ISOdateRange = Split(arr, vbLf, 1 + Len(arr) - Len(Replace(arr, vbLf, "")))
End Function
Sub expandDateFields(pvt As PivotTable, tbl, fld)
If fld = "Fiscal" Or fld = "Calendar" Then
    pvt.PivotFields("[" & tbl & "].[" & fld & "].[Year]").DrilledDown = True
    pvt.PivotFields("[" & tbl & "].[" & fld & "].[Quarter]").DrilledDown = True
    pvt.PivotFields("[" & tbl & "].[" & fld & "].[Month]").DrilledDown = True
End If
End Sub
Sub addFieldToDW(pvt As PivotTable, tbl, fld, Optional fldOrient = xlRowField, Optional position = "", Optional preFilter = "")
If UBound(Filter(Array(xlColumnField, xlDataField, xlHidden, xlPageField, xlRowField), fldOrient)) = -1 Then
    Debug.Print Err
Else
    If tbl = "Measures" Then
        pvt.AddDataField pvt.CubeFields("[Measures].[" & fld & "]")
    Else
        pvt.CubeFields("[" & tbl & "].[" & fld & "]").CreatePivotFields
        'need an extra check for date type fields
        If fld = "Calendar" Or fld = "Fiscal" Then
            'right now just use individual days. need to discern what the appropriate year, quarter, and month are for each date
            For i = LBound(preFilter) To UBound(preFilter)
                dtInfo = comtools.dateInfo(preFilter(i), yearType:=fld)
                preFilter(i) = "[" & tbl & "].[" & fld & "].[Year].&[" & dtInfo(0) & "].&[" & dtInfo(1) & "].&[" & dtInfo(2) & "].&[" & preFilter(i) & "]"
            Next i
            pvt.PivotFields("[" & tbl & "].[" & fld & "].[Date]").VisibleItemsList = preFilter
        Else
            'then its just a regular field, do the normal prefilter
            If IsArray(preFilter) Then
                'it has to be passed in as an array
                For i = LBound(preFilter) To UBound(preFilter)
                    preFilter(i) = "[" & tbl & "].[" & fld & "].&[" & preFilter(i) & "]"
                Next i
                pvt.PivotFields("[" & tbl & "].[" & fld & "].[" & fld & "]").VisibleItemsList = preFilter
            End If
        End If
        pvt.CubeFields("[" & tbl & "].[" & fld & "]").Orientation = fldOrient
        If position <> "" Then
            pvt.CubeFields("[" & tbl & "].[" & fld & "]").position = position
        End If
    End If
End If
End Sub
Sub addFieldToPvt(pvt As PivotTable, fld, Optional fldOrient = xlRowField, Optional position = "", _
    Optional caption = "", Optional data_function = xlCount, Optional preFilter = "", _
    Optional filter_blank = False)
Dim p As PivotItem
If UBound(Filter(Array(xlColumnField, xlDataField, xlHidden, xlPageField, xlRowField), fldOrient)) = -1 Then
    Debug.Print Err
Else
    If IsArray(preFilter) Then
        'first make the pivot field we want visible
        For i = LBound(preFilter) To UBound(preFilter)
            pvt.PivotFields(fld).PivotItems(preFilter(i)).visible = True
        Next i
        For Each p In pvt.PivotFields(fld).PivotItems
            If UBound(Filter(preFilter, p.Name)) = -1 Then
                p.visible = False
            End If
        Next p
        If filter_blank Then
            'filter out blank as well
            pvt.PivotFields(fld).PivotItems("").visible = False
        End If
    End If
    If fldOrient = xlDataField Then
        If UBound(Filter(Array(xlAverage, xlCount, xlCountNums, xlMax, xlMin, xlProduct, xlStDev, xlStDevP, xlSum, xlUnknown, xlVar, xlVarP), data_function)) = -1 Then
            Debug.Print Err
            Exit Sub
        End If
        pvt.AddDataField pvt.PivotFields(fld), caption, data_function
    Else
        pvt.PivotFields(fld).Orientation = fldOrient
    End If
    If position <> "" Then
        pvt.PivotFields(fld).position = position
    End If
End If
End Sub


Sub expandAllSubFields(pvt As PivotTable, tbl, fld)
Dim pf As PivotField
nm = "[" & tbl & "].[" & fld
On Error Resume Next    'the last sub field will error out if we try to drill down
For Each pf In pvt.PivotFields
    If Left(pf.Name, Len(nm)) = nm Then
        pf.DrilledDown = True
    End If
Next pf
On Error GoTo 0
End Sub




